//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `offers.json`.
    static let offersJson = Rswift.FileResource(bundle: R.hostingBundle, name: "offers", pathExtension: "json")
    
    /// `bundle.url(forResource: "offers", withExtension: "json")`
    static func offersJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.offersJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `arrowRight`.
    static let arrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowRight")
    /// Image `blue`.
    static let blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue")
    /// Image `bookings`.
    static let bookings = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookings")
    /// Image `dusitGold`.
    static let dusitGold = Rswift.ImageResource(bundle: R.hostingBundle, name: "dusitGold")
    /// Image `experiences`.
    static let experiences = Rswift.ImageResource(bundle: R.hostingBundle, name: "experiences")
    /// Image `hotels-active`.
    static let hotelsActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "hotels-active")
    /// Image `hotels`.
    static let hotels = Rswift.ImageResource(bundle: R.hostingBundle, name: "hotels")
    
    /// `UIImage(named: "arrowRight", bundle: ..., traitCollection: ...)`
    static func arrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "blue", bundle: ..., traitCollection: ...)`
    static func blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bookings", bundle: ..., traitCollection: ...)`
    static func bookings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dusitGold", bundle: ..., traitCollection: ...)`
    static func dusitGold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dusitGold, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "experiences", bundle: ..., traitCollection: ...)`
    static func experiences(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.experiences, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hotels", bundle: ..., traitCollection: ...)`
    static func hotels(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hotels, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hotels-active", bundle: ..., traitCollection: ...)`
    static func hotelsActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hotelsActive, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `HotelTableViewCell`.
    static let hotelTableViewCell = _R.nib._HotelTableViewCell()
    
    /// `UINib(name: "HotelTableViewCell", in: bundle)`
    static func hotelTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hotelTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `hotelOfferCell`.
    static let hotelOfferCell: Rswift.ReuseIdentifier<HotelTableViewCell> = Rswift.ReuseIdentifier(identifier: "hotelOfferCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `ViewController`, and contains static references to 1 segues.
    struct viewController {
      /// Segue identifier `showOffers`.
      static let showOffers: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewController, OfferTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showOffers")
      
      /// Optionally returns a typed version of segue `showOffers`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showOffers(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewController, OfferTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewController.showOffers, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _HotelTableViewCell.validate()
    }
    
    struct _HotelTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HotelTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "hotelOfferCell"
      let name = "HotelTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HotelTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HotelTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowRight' is used in nib 'HotelTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "blue") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hotels") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hotels' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hotels-active") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hotels-active' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
